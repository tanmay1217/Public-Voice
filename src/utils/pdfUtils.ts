import { jsPDF } from 'jspdf';

export const generatePDF = (policyData: any, reportContent: string) => {
  const doc = new jsPDF();
  let yPos = 20;
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);

  // Helper functions
  const addHeading = (text: string, size: number = 20) => {
    doc.setFontSize(size);
    doc.setTextColor(0, 0, 139);
    doc.text(text, margin, yPos);
    yPos += 10;
  };

  const addText = (text: string, size: number = 12) => {
    doc.setFontSize(size);
    doc.setTextColor(0, 0, 0);
    const lines = doc.splitTextToSize(text, contentWidth);
    doc.text(lines, margin, yPos);
    yPos += (lines.length * 7) + 5;
  };

  const addSection = (title: string, content: string | string[]) => {
    // Check if we need a new page
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }

    addHeading(title, 16);
    if (Array.isArray(content)) {
      content.forEach(item => {
        doc.setFontSize(12);
        const bulletPoint = `â€¢ ${item}`;
        const lines = doc.splitTextToSize(bulletPoint, contentWidth);
        doc.text(lines, margin, yPos);
        yPos += (lines.length * 7) + 3;
      });
    } else {
      addText(content);
    }
    yPos += 5;
  };

  // Title and Header
  doc.setFontSize(24);
  doc.setTextColor(0, 0, 139);
  const title = policyData.name;
  const titleLines = doc.splitTextToSize(title, contentWidth);
  doc.text(titleLines, margin, yPos);
  yPos += (titleLines.length * 10) + 10;

  // Executive Summary
  addSection('Executive Summary', policyData.description);

  // Beneficiary Profile
  addSection('Target Beneficiaries', [
    `Age Range: ${policyData.beneficiaryPersona.ageRange}`,
    `Gender: ${policyData.beneficiaryPersona.gender}`,
    `Occupation: ${policyData.beneficiaryPersona.occupation}`,
    `Location: ${policyData.beneficiaryPersona.location}`,
    `Income Level: ${policyData.beneficiaryPersona.income}`,
    `Additional Details: ${policyData.beneficiaryPersona.additionalDetails}`
  ]);

  // Public Sentiment Analysis
  const sentimentData = policyData.sentimentData;
  addSection('Public Sentiment Analysis', [
    `Positive Feedback: ${sentimentData.positive.toFixed(1)}%`,
    `Neutral Feedback: ${sentimentData.neutral.toFixed(1)}%`,
    `Negative Feedback: ${sentimentData.negative.toFixed(1)}%`
  ]);

  // Key Comments
  addSection('Public Comments', sentimentData.comments.map(
    (comment: any) => `${comment.text} (${comment.sentiment})`
  ));

  // Detailed Analysis
  const sections = reportContent.split('\n\n');
  sections.forEach(section => {
    if (section.trim()) {
      const [sectionTitle, ...content] = section.split('\n');
      if (sectionTitle && content.length > 0) {
        addSection(
          sectionTitle.replace(/^#+\s*/, '').trim(),
          content.join('\n').trim()
        );
      }
    }
  });

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  const footer = 'Generated by Public Voice - Indian Government Welfare Schemes Portal';
  doc.text(footer, pageWidth / 2, 290, { align: 'center' });

  return doc;
};